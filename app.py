import streamlit as st
import pandas as pd
import joblib

# --- Load m√¥ h√¨nh ---
try:
    loaded = joblib.load("rfmodel (4).pkl")
    if isinstance(loaded, tuple) and len(loaded) == 2:
        rf_model, encoder = loaded
        st.success("ƒê√£ load th√†nh c√¥ng m√¥ h√¨nh Random Forest v√† encoder")
    else:    
        st.error(" File kh√¥ng ph·∫£i tuple (rf_model, encoder)")
        rf_model, encoder = None, None
except Exception as e:
    st.error(f"Kh√¥ng th·ªÉ load m√¥ h√¨nh: {e}")
    rf_model, encoder = None, None


def main():
    st.title("Internet Addiction Prediction")
    st.write("Nh·∫≠p th√¥ng tin b√™n d∆∞·ªõi ƒë·ªÉ d·ª± ƒëo√°n m·ª©c ƒë·ªô nghi·ªán Internet:")

    with st.form("prediction_form"):
        col1, col2 = st.columns(2)
        with col1:
            gender = st.selectbox("Gi·ªõi t√≠nh", ["Male", "Female"])
            academic = st.selectbox("Tr√¨nh ƒë·ªô h·ªçc v·∫•n", ["Graduate", "Undergraduate", "Highschool"])
            relationship = st.selectbox("T√¨nh tr·∫°ng m·ªëi quan h·ªá", ["Single", "In a Relationship"])
            platform = st.selectbox("N·ªÅn t·∫£ng s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t",
                                    ["Facebook", "Instagram", "TikTok", "YouTube", "Twitter", "Snapchat", "LinkedIn"])
        with col2:
            sleep_hours = st.number_input("S·ªë gi·ªù ng·ªß m·ªói ƒë√™m", 0.0, 12.0, 7.0)
            mental_health = st.slider("ƒêi·ªÉm s·ª©c kh·ªèe t√¢m l√Ω (1‚Äì10)", 1, 10, 5)
            usage_hours = st.number_input("S·ªë gi·ªù s·ª≠ d·ª•ng Internet m·ªói ng√†y", 0.0, 24.0, 5.0)
            conflict_over_internet = st.number_input("Xung ƒë·ªôt khi s·ª≠ d·ª•ng Internet", 0.0, 3.0, 0.0)
        submit = st.form_submit_button("üîç D·ª± ƒëo√°n")

    if submit:
        if rf_model is None or encoder is None:
            st.error("Kh√¥ng th·ªÉ d·ª± ƒëo√°n v√¨ m√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c load ƒë√∫ng c√°ch.")
            return

        try:
            data = pd.DataFrame([{
                "Gender": gender,
                "Academic_Level": academic,
                "Sleep_Hours_Per_Night": sleep_hours,
                "Relationship_Status": relationship,
                "Mental_Health_Score": mental_health,
                "Most_Used_Platform": platform,
                "Avg_Daily_Usage_Hours": usage_hours,
                "Conflicts_Over_Social_Media": conflict_over_internet
            }])
            X = encoder.transform(data)
            prediction = rf_model.predict(X)[0]    
            level = "Th·∫•p" if prediction < 4 else ("Trung b√¨nh" if prediction < 7 else "Cao")

            st.success(f"**ƒêi·ªÉm d·ª± ƒëo√°n:** {round(prediction, 6)}")
            st.info(f"**M·ª©c ƒë·ªô nghi·ªán Internet:** {level}")

        except Exception as e:
            st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")


if __name__ == "__main__":
    main()
