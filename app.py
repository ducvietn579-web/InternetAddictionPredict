import streamlit as st
import pandas as pd
import joblib

try:
    loaded = joblib.load("rfmodel_enc.rpk")
    st.write("üì¶ Ki·ªÉu d·ªØ li·ªáu load ƒë∆∞·ª£c:", type(loaded))

    # N·∫øu l√† tuple -> gi·∫£i n√©n th√†nh 2 ph·∫ßn
    if isinstance(loaded, tuple) and len(loaded) == 2:
        rf_model, encoder = loaded
        st.success("‚úÖ ƒê√£ load th√†nh c√¥ng tuple (rf_model, encoder)")
        st.write("Ki·ªÉu model:", type(rf_model))
        st.write("Ki·ªÉu encoder:", type(encoder))
    else:
        rf_model, encoder = None, None
        st.error("‚ö†Ô∏è File kh√¥ng ph·∫£i tuple (rf_model, encoder)")
except Exception as e:
    st.error(f"Kh√¥ng th·ªÉ load m√¥ h√¨nh: {e}")
    rf_model, encoder = None, None

def main():
    st.title("üß† Internet Addiction Prediction")
    st.write("Nh·∫≠p th√¥ng tin b√™n d∆∞·ªõi ƒë·ªÉ d·ª± ƒëo√°n m·ª©c ƒë·ªô nghi·ªán Internet:")

    with st.form("prediction_form"):
        col1, col2 = st.columns(2)
        with col1:
            gender = st.selectbox("Gi·ªõi t√≠nh", ["Male", "Female"])
            academic = st.selectbox("Tr√¨nh ƒë·ªô h·ªçc v·∫•n", ["Graduate", "Undergraduate", "High School"])
            relationship = st.selectbox("T√¨nh tr·∫°ng m·ªëi quan h·ªá", ["Single", "In a relationship", "Complicated"])
            platform = st.selectbox(
                                    "N·ªÅn t·∫£ng s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t",["Instagram",
                                                                   "LINE",
                                                                   "VK",
                                                                   "Facebook",
                                                                   "LinkedIn",
                                                                   "WhatsApp",
                                                                   "TikTok",
                                                                   "KakaoTalk",
                                                                   "WeChat",
                                                                   "Twitter",
                                                                   "YouTube",
                                                                   "Snapchat"
                                                                ]
                                                            )
            sleep_hours = st.number_input("S·ªë gi·ªù ng·ªß m·ªói ƒë√™m", min_value=0.0, max_value=12.0, value=7.0)
            mental_health = st.slider("ƒêi·ªÉm s·ª©c kh·ªèe t√¢m l√Ω (1-10)", 1, 10, 5)
            usage_hours = st.number_input("S·ªë gi·ªù s·ª≠ d·ª•ng Internet m·ªói ng√†y", min_value=0.0, max_value=24.0, value=5.0)

            submit = st.form_submit_button("üîç D·ª± ƒëo√°n")

   if submit:
    if rf_model is None or encoder is None:
        st.error("Kh√¥ng th·ªÉ d·ª± ƒëo√°n v√¨ m√¥ h√¨nh ho·∫∑c encoder ch∆∞a ƒë∆∞·ª£c load ƒë√∫ng c√°ch.")
    else:
        try:
            data = pd.DataFrame([{
                "Gender": gender,
                "Academic_Level": academic,
                "Sleep_Hours_Per_Night": sleep_hours,
                "Relationship_Status": relationship,
                "Mental_Health_Score": mental_health,
                "Most_Used_Platform": platform,
                "Avg_Daily_Usage_Hours": usage_hours
            }])

            st.write("üßæ D·ªØ li·ªáu g·ªëc:", data)

            # D√πng encoder ƒë√£ l∆∞u ƒë·ªÉ transform d·ªØ li·ªáu ch·ªØ
            X = encoder.transform(data)
            st.write("üìä D·ªØ li·ªáu sau encoder:", X)

            # D·ª± ƒëo√°n
            prediction = rf_model.predict(X)[0]

            # X·∫øp lo·∫°i
            if prediction < 4:
                level = "Th·∫•p"
            elif prediction < 7:
                level = "Trung b√¨nh"
            else:
                level = "Cao"

            st.success(f"**ƒêi·ªÉm d·ª± ƒëo√°n:** {round(prediction, 2)}")
            st.info(f"**M·ª©c ƒë·ªô nghi·ªán Internet:** {level}")

        except Exception as e:
            st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")

if __name__ == '__main__':
    main()
