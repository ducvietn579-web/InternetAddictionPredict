import streamlit as st
import xgboost as xgb
import numpy as np
import pandas as pd
import joblib

# --- Load m√¥ h√¨nh Machine Learning ---
try:
    GD_model, encoder = joblib.load("GDmodel_enc.rpk")
except Exception as e:
    st.error(f"‚ùå Kh√¥ng th·ªÉ load m√¥ h√¨nh: {e}")
    GD_model, encoder = None, None

# --- Mapping cho d·ªØ li·ªáu d·∫°ng ch·ªØ ---
gender_map = {"Male": 0, "Female": 1}
academic_map = {"Undergraduate": 0, "Graduated": 1, "Highschool": 2}
relationship_map = {"Single": 0, "In a relationship": 1, "Complicated": 2}
platform_map = {"Youtube": 0, "Facebook": 1, "TikTok": 2, "Instagram": 3, "Other": 4}

# --- Giao di·ªán ch√≠nh ---
def main():
    st.title("üß† Internet Addiction Prediction")
    st.write("Nh·∫≠p th√¥ng tin b√™n d∆∞·ªõi ƒë·ªÉ d·ª± ƒëo√°n m·ª©c ƒë·ªô nghi·ªán Internet:")

    # --- T·∫°o form nh·∫≠p d·ªØ li·ªáu ---
    with st.form("prediction_form"):
        col1, col2 = st.columns(2)
        with col1:
            gender = st.selectbox("Gi·ªõi t√≠nh", list(gender_map.keys()))
            academic = st.selectbox("Tr√¨nh ƒë·ªô h·ªçc v·∫•n", list(academic_map.keys()))
            relationship = st.selectbox("T√¨nh tr·∫°ng m·ªëi quan h·ªá", list(relationship_map.keys()))
            platform = st.selectbox("N·ªÅn t·∫£ng s·ª≠ d·ª•ng nhi·ªÅu nh·∫•t", list(platform_map.keys()))
        with col2:
            sleep_hours = st.number_input("S·ªë gi·ªù ng·ªß m·ªói ƒë√™m", min_value=0.0, max_value=12.0, value=7.0)
            mental_health = st.slider("ƒêi·ªÉm s·ª©c kh·ªèe t√¢m l√Ω (1-10)", 1, 10, 5)
            usage_hours = st.number_input("S·ªë gi·ªù s·ª≠ d·ª•ng Internet m·ªói ng√†y", min_value=0.0, max_value=24.0, value=5.0)

        submit = st.form_submit_button("üîç D·ª± ƒëo√°n")

    # --- Khi b·∫•m n√∫t d·ª± ƒëo√°n ---
    if submit:
        if GD_model is None or encoder is None:
            st.error("Kh√¥ng th·ªÉ d·ª± ƒëo√°n v√¨ m√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c load ƒë√∫ng c√°ch.")
        else:
            try:
                # --- Chu·∫©n b·ªã d·ªØ li·ªáu ---
                data = {
                    "Gender": gender_map[gender],
                    "Academic_Level": academic_map[academic],
                    "Sleep_Hours_Per_Night": sleep_hours,
                    "Relationship_Status": relationship_map[relationship],
                    "Mental_Health_Score": mental_health,
                    "Most_Used_Platform": platform_map[platform],
                    "Avg_Daily_Usage_Hours": usage_hours
                }

                X = pd.DataFrame([data])
                X_encoded = encoder.transform(X)
                prediction = GD_model.predict(X_encoded)[0]

                # --- X·∫øp lo·∫°i m·ª©c ƒë·ªô ---
                if prediction < 4:
                    level = "Th·∫•p"
                elif prediction < 7:
                    level = "Trung b√¨nh"
                else:
                    level = "Cao"

                # --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---
                st.success(f"**ƒêi·ªÉm d·ª± ƒëo√°n:** {round(prediction, 2)}")
                st.info(f"**M·ª©c ƒë·ªô nghi·ªán Internet:** {level}")

            except Exception as e:
                st.error(f"L·ªói khi d·ª± ƒëo√°n: {e}")

# --- Ch·∫°y ·ª©ng d·ª•ng ---
if __name__ == '__main__':
    main()
